plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.openapi.generator" version "6.2.0"
	id "org.unbroken-dome.test-sets" version "4.0.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.17.4")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
	implementation "org.flywaydb:flyway-core"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testRuntimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'com.h2database:h2'
	testImplementation project(':open-api-java-client')
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

openApiGenerate {
	inputSpec = "$buildDir/classes/java/openApiGenerator/open-api.json".toString()
	outputDir = "$rootDir/open-api-java-client".toString()
	apiPackage = "com.example.demo.generated"
	invokerPackage = "com.example.demo.generated"
	modelPackage = "com.example.demo.generated"
	configOptions = [
			dateLibrary    : "java8",
			openApiNullable: "false",
	]
	generatorName = 'java'
	groupId = "com.example.demo"
	globalProperties = [
			modelDocs: "false"
	]
	additionalProperties = [
			hideGenerationTimestamp: true
	]
}

testSets {
	openApiGenerator
}

tasks.withType(Test) {
	group = 'verification'
	useJUnitPlatform()
	testLogging {
		showExceptions true
		showStandardStreams = false
		showCauses true
		showStackTraces true
		exceptionFormat "full"
		events("skipped", "failed", "passed")
	}
}

openApiGenerator.outputs.upToDateWhen { false }

tasks.named('openApiGenerate') {
	dependsOn 'openApiGenerator'
}